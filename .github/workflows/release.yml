name: Flutter Release

# 创建触发打包条件：只要推送tag，就会触发版本打包

on:
  push:
    # branches:
    #   - main
    tags:
      - v*
  # pull_request:
  #   branches:
  #     - main
  # workflow_call:
  #   inputs:
  #     tag-name:
  #       type: string
  #       default: "draft"
env:
  ENV_A: 1
  TAG_NAME: "${{ github.ref_name }}"
  # FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true

jobs:
  build:
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: android
            os: ubuntu-24.04
            # targets: apk,aab
            targets: apk

          # - platform: macos
          #   os: macos-latest
          #   aarch: universal
          #   targets: dmg,pkg

          # - platform: windows
          #   os: windows-latest
          #   aarch: amd64
          #   targets: exe,msix

          # - platform: linux
          #   os: ubuntu-24.04
          #   aarch: amd64
          #   targets: appimage,deb,rpm
  
          # - platform: ios
          #   os: macos-14
          #   aarch: universal
          #   filename: fci-ios
          #   targets: ipa

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: kuhnroyal/flutter-fvm-config-action/config@v3
        id: fvm-config-action
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ steps.fvm-config-action.outputs.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - name: Get flutter dependencies
        run: flutter pub get    
        
      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      - name: Setup Java
        if: startsWith(matrix.platform,'android')
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      # Build apk
      # - run: flutter build apk --target-platform android-arm
      # - run: flutter build apk --release --target-platform=android-arm64 --no-shrink
      # - run: flutter build ${{ matrix.targets }} --release --target-platform=android-arm64 --no-shrink
      
      - name: Build Android app
        if: startsWith(matrix.platform,'android')
        # continue-on-error: true
        run: |
          flutter_distributor package --platform ${{ matrix.platform }} --targets ${{ matrix.targets }}

      # - name: Build MacOS app
      #   if: startsWith(matrix.platform,'macos')
      #   run: |
      #     node -v
      #     npm install -g appdmg
      #     flutter_distributor package --platform ${{ matrix.platform }} --targets ${{ matrix.targets }}

      # - name: Build Windows app
      #   if: startsWith(matrix.platform,'windows')
      #   # continue-on-error: true
      #   run: |
      #     wmic os get Caption,Version
      #     pwd
      #     # choco install innosetup -y
      #     ls "C:\Program Files (x86)\Inno Setup 6\Languages"
      #     cp "windows\packaging\exe\ChineseSimplified.isl" "C:\Program Files (x86)\Inno Setup 6\Languages"
      #     flutter_distributor package --platform ${{ matrix.platform }} --targets ${{ matrix.targets }}

      # - name: Build Linux app
      #   if: startsWith(matrix.platform,'linux')
      #   run: |
      #     flutter doctor
      #     sudo apt install clang cmake ninja-build pkg-config libgtk-3-dev -y
      #     # rpm env
      #     sudo apt install rpm patchelf -y
      #     # appimage env
      #     sudo add-apt-repository universe -y
      #     sudo apt install libfuse2t64 locate -y
      #     wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
      #     chmod +x appimagetool
      #     sudo mv appimagetool /usr/local/bin/
      #     # build
      #     flutter_distributor package --platform ${{ matrix.platform }} --targets ${{ matrix.targets }}

      - name: Upload app
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.platform }}
          path: dist/*/*

      # - name: Release app
      #   uses: ncipollo/release-action@v1
      #   with:
      #     # artifacts: "build/app/outputs/apk/release/*.apk"
      #     artifacts: dist/*/*
      #     token: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: build
    if: always()
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download app from artifact
        uses: actions/download-artifact@v4
        with:
          path: dist/
      - name: Display structure of downloaded files
        run: |
          pwd
          ls -R
      - name: Get pubspec.yaml version value
        run: |
          sudo snap install yq
          VERSION=$(yq eval '.version' 'pubspec.yaml')
          echo "Version: $VERSION"
      - name: Prepare release message
        run: |
          pip install gitchangelog pystache mustache markdown
          prelease=$(curl --silent "https://api.github.com/repos/jeffid/flutter_ci/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")')
          current="${{ env.TAG_NAME }}"
          sed -e "s|RELEASE_TAG|${{ env.TAG_NAME }}|g" -e "s|VERSION|${VERSION}|g" ./.github/release_message.md > release.md
          echo -e "\n\n<details markdown=1> <summary>All changes from $current to the latest commit:</summary>\n\n" >> release.md
          gitchangelog
          gitchangelog "${prelease}.." >> release.md  2>&1 || echo "Error in gitchangelog"
          echo -e "\n\n</details>" >> release.md
      - name: Release app
        uses: ncipollo/release-action@v1
        with:
          artifacts: dist/*/*/*
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: './release.md'


    

